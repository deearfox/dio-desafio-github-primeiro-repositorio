dot new console -n EstruturaDoPrograma

cd EstruturaDoPrograma/

explorer .

code .

F5 - compila, salva.


<<É uma linguagem elegante, orientada a objeto e fortemente tipada>>

A sintaxe do C# é similar a do C, C++ ou Java

Suporta os conceitos de encapsulamento, herança e polimorfismo (OO)

Os programas C# são executados no .NET, que inclui:

CLR (Common Language Runtime)
Conjunto unificado de bibliotecas de classes

Atualmente o compilador do C# é o Roslyn


O código-fonte escrito em C# é compilado em uma linguagem intermediária (IL)

O código e os recursos de IL são armazenados no disco em um arquivo executável chamado
assembly, geralmente com uma extensão .exe ou .dll

Quando o programa C# é executado, o assembly é carregado no CLR

Em seguida o CLR executará a compilação just in time *JIT para converter o código IL
em instruções de máquinas nativas

O CLR também fornece outros serviços>

<< Garbage Collector >> - valida/verifica objetos de memória que não estão utilizados e desaloca esses objetos
para que se libere espaço
<< Exception Handler >> - receber e controlar as exceções que ocorrem de erros no código
<< Resources Manager >>

Além dos serviços de tempo de execução, o .NET também inclui uma extensa biblioteca com 
milhares de classes que fornecem uma ampla variedade de funcionalidades úteis, desde entrada e saída de 
arquivos, manipulação de cadeias de caracteres, análise XML, etc


<<Estrutura de programa>>

Os principais conceitos organizacionais em C# são:

<< programas >>
<< namespaces >>
<< tipos >>
<< membros >>
<< assemblies >>

Programas C# consistem em um ou mais arquivos

Os programas declaram tipos, que contêm membros e podem ser organizados e podem ser organizados em 
namespaces 

Classes e interfaces são exemplos de tipos

Campos, métodos, propriedades e eventos são exemplo de membros


Quando os programas C# são compilados, eles são fisicamente empacotados em assemblies

Os assemblies geralmente têm a extensão de arquivo .exe ou .dll, dependendo se são aplicações
ou bibliotecas.


<<Conhecendo o C#>> parte 02

Tipos de <<valor>> dados juntos na memória

Variáveis de tipos de valor contêm diretamente seus dados

As variáveis têm sua própria cópia dos dados e não é possível que as operações 
afetem outra variável (excete no caso das variáveis de parâmetro ref ou out)


Numéricos: sbyte, short, int, long, byte, ushort, uint, ulong

Caracteres Unicode: char

Pontos flutuantes: float, double, decimal

Booleano: bool

enum, struct e tipos nullable (Exemplo int?)


Tipos de <<referência>> 

Variáveis de tipos de referência armazenam referências a seus dados

É possível que duas variáveis façam referência ao mesmo objeto e, portanto, que operações em uma
variável afetem o objeto referenciado pela outra variável.

Tipos Classe: class, object, string

Tipos Arrays: int[], int[], etc...

interface, delegate


Instruções 

Ações de um programa são expressas usando intruções

{

	um bloco permite que várias instruções sejam escritas em contextos

}


Declaração de variáveis e constantes locais
if
switch
while
do
for
foreach


break
continue
return
throw
try...catch...finally
using










