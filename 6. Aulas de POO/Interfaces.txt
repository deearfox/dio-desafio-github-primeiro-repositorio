Uma interface é um contrato que pode ser implementado por uma classe.
 
É como se fosse uma classe abstrata, podendo definir métodos abstratos para serem implementados.

Assim como uma classe abstrata, uma interface não pode ser instanciada.

<<interface>> Calculadora (+ somar(), + subtrair(), +multiplicar(), +dividir())

Classe: CalculadoraComum (+ somar(), + subtrair(), +multiplicar(), +dividir())

Classe: CalculadoraCientifica (+ somar(), + subtrair(), +multiplicar(), +dividir())

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using ExemploPOO.Interfaces;

namespace ExemploPOO.Models
{
    public class Calculadora : ICalculadora
    {
        public int Dividir(int num1, int num2)
        {
            return num1 / num2;
        }

        public int Multiplicar(int num1, int num2)
        {
            return num1 * num2;
        }

        public int Somar(int num1, int num2)
        {
            return num1 + num2;

        }

        public int Somar(int num1, int num2, int num3)
        {
            return num1 + num2 + num3;

        }
        
        public int Subtrair(int num1, int num2)
        {
            return num1 - num2;
        }
    }
}



using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace ExemploPOO.Interfaces
{
    public interface ICalculadora
    {
        int Somar(int num1, int num2);
        int Subtrair(int num1, int num2);
        int Multiplicar(int num1, int num2);
        int Dividir(int num1, int num2);
    }
}



using System;
using ExemploPOO.Interfaces;
using ExemploPOO.Models;

namespace ExemploPOO
{
    class Program
    {
        static void Main(string[] args)
        {
            
            ICalculadora calc = new Calculadora();
            System.Console.WriteLine(calc.Somar(10 , 20));